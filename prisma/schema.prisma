generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fullname String
  email    String @unique
  password String

  isAdmin Boolean @default(false)

  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sport {
  id        String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String     @unique
  sportGyms SportGym[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Gym {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String         @unique
  address       String
  sportGyms     SportGym[]
  subscriptions Subscription[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SportGym {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  gymId   String @db.Uuid
  sportId String @db.Uuid
  gym     Gym    @relation(fields: [gymId], references: [id])
  sport   Sport  @relation(fields: [sportId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([gymId, sportId])
}

model Subscription {
  id        String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String             @db.Uuid
  user      User               @relation(fields: [userId], references: [id])
  gymId     String             @db.Uuid
  gym       Gym                @relation(fields: [gymId], references: [id])
  startDate DateTime           @default(now())
  endDate   DateTime?
  status    SubscriptionStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SubscriptionStatus {
  ACTIVE
  PAUSED
  CANCELED
}
